// Dog House Slot Machine ‚Äî main.js
// –ú–∞—Å—à—Ç–∞–±–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ–±-—Å–ª–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∏ –∫—Ä–∞—Å–∏–≤—ã–º UI

document.addEventListener('DOMContentLoaded', function() {
// Dog House Slot Machine ‚Äî main.js
// –ú–∞—Å—à—Ç–∞–±–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–µ–±-—Å–ª–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö –ø—Ä–∞–≤–∏–ª –∏ –∫—Ä–∞—Å–∏–≤—ã–º UI

// --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
const EMOJIS = [
    'üê∂', 'ü§°', 'üòà', 'üëπ', 'üëΩ', 'ü§ñ', 'üíÄ', 'üëª', 'ü§¨', 'üòé', 'üçî'
];

// –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - API –æ—Ç–∫–ª—é—á–µ–Ω
const LOCAL_MODE = window.LOCAL_MODE || true;

// –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let localUsersDB = null;
const WILD_INDEXES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è WILD (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
const BONUS_INDEX = 0; // –ò–Ω–¥–µ–∫—Å –¥–ª—è BONUS (–±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª)
const WILD_EMOJI = 'ü•à'; // WILD —Å–∏–º–≤–æ–ª (—Å–µ—Ä–µ–±—Ä—è–Ω–∞—è –º–µ–¥–∞–ª—å)
const BONUS_EMOJI = 'üí∞'; // BONUS —Å–∏–º–≤–æ–ª (–º–µ—à–æ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏)
const REELS = 5;
const ROWS = 3;
const PAYLINES = [
    // 20 –ª–∏–Ω–∏–π –≤—ã–ø–ª–∞—Ç (–∫–∞–∂–¥–∞—è ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 5 –ø–æ–∑–∏—Ü–∏–π: row –¥–ª—è –∫–∞–∂–¥–æ–≥–æ reel)
    [0,0,0,0,0], [1,1,1,1,1], [2,2,2,2,2],
    [0,1,2,1,0], [2,1,0,1,2], [0,0,1,0,0], [2,2,1,2,2],
    [1,0,0,0,1], [1,2,2,2,1], [0,1,1,1,0],
    [2,1,1,1,2], [1,0,1,2,1], [1,2,1,0,1], [0,1,2,2,2],
    [2,1,0,0,0], [0,0,0,1,2], [2,2,2,1,0], [0,2,0,2,0],
    [2,0,2,0,2], [1,1,0,1,1]
];
const PAYTABLE = [
    // 5, 4, 3 —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥ (x —Å—Ç–∞–≤–∫–∞)
    [37.5, 7.5, 2.5], // üëπ
    [25.0, 5.0, 1.75], // üòà
    [15.0, 3.0, 1.25], // üíÄ
    [10.0, 2.0, 1.0], // ü§ñ
    [7.5, 1.25, 0.6], // üê∑ (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ü§¨)
    [5.0, 1.0, 0.4], // ü¶ã (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ üëª)
    [2.5, 0.5, 0.25], // ü¶ç (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ü§°)
    [2.5, 0.5, 0.25], // üêØ (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ üëΩ)
    [1.25, 0.25, 0.1], // üçî (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ üòé)
    [1.25, 0.25, 0.1], // üçì (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ üçî)
    [1.25, 0.25, 0.1], // üç≠ (–∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ ü§°)
];
const START_BALANCE = 1_000_000_000;
const MIN_BET = 1_000_000;
const MAX_BET = 100_000_000;
const BET_STEP = 1_000_000;
const AUTOSPIN_LIMIT = 100;
const BONUS_BUY_MULTIPLIER = 100; // x100 –æ—Ç —Å—Ç–∞–≤–∫–∏
const BONUS_WIN_MULTIPLIER = 5; // x5 –∑–∞ 3 BONUS
const FREE_SPINS_MIN = 7;
const FREE_SPINS_MAX = 15;

// --- –°–û–°–¢–û–Ø–ù–ò–ï –ò–ì–†–´ ---
let state = {
    balance: START_BALANCE,
    bet: MIN_BET,
    reels: [], // 5x3
    history: [],
    autospin: false,
    autospinCount: 0,
    freeSpins: 0,
    inBonus: false,
    stickyWilds: [],
    win: 0,
    lastWinLines: [],
    bonusActive: false,
    autospinActive: false, // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
};

// --- –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
let userState = {
    isLoggedIn: false,
    userId: null,
    userNick: null,
    lastSyncTime: 0,
    syncInProgress: false
};

// --- –≠–õ–ï–ú–ï–ù–¢–´ DOM ---
const balanceEl = document.getElementById('balance');
const betAmountEl = document.getElementById('bet-amount');
const reelsEl = document.getElementById('reels');
const spinBtn = document.getElementById('spin-btn');
const autospinBtn = document.getElementById('autospin-btn');
const maxbetBtn = document.getElementById('maxbet-btn');
const buybonusBtn = document.getElementById('buybonus-btn');
const betMinusBtn = document.getElementById('bet-minus');
const betPlusBtn = document.getElementById('bet-plus');
const winMessageEl = document.getElementById('win-message');
const notificationEl = document.getElementById('notification');
const rulesBtn = document.getElementById('rules-btn');
const historyBtn = document.getElementById('history-btn');
const sidebar = document.getElementById('sidebar');
const sidebarContent = document.getElementById('sidebar-content');
const closeSidebarBtn = document.getElementById('close-sidebar');
const showPaylinesBtn = document.getElementById('show-paylines');
const modal = document.getElementById('modal');
const modalContent = document.getElementById('modal-content');
const closeModalBtn = document.getElementById('close-modal');

// --- –≠–õ–ï–ú–ï–ù–¢–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ---
const loginSection = document.getElementById('login-section');
const userSection = document.getElementById('user-section');
const userIdInput = document.getElementById('user-id-input');
const loginBtn = document.getElementById('login-btn');
const logoutBtn = document.getElementById('logout-btn');
const userNickEl = document.getElementById('user-nick');

// --- –£–¢–ò–õ–ò–¢–´ ---
function formatNumber(num) {
    return num.toLocaleString('ru-RU').replace(/\s/g, '.').replace(/,/g, '.');
}

// --- –ó–ê–ì–†–£–ó–ö–ê –õ–û–ö–ê–õ–¨–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
async function loadLocalUsersDB() {
    try {
        const response = await fetch('./users_db.json');
        if (response.ok) {
            localUsersDB = await response.json();
            console.log('–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', Object.keys(localUsersDB).length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
            return true;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    return false;
}

// --- –õ–û–ö–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò (–±–µ–∑ API) ---
async function fetchUserBalance(userId) {
    console.log('–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', !!localUsersDB);
    
    // –ò—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if (localUsersDB && localUsersDB[userId]) {
        const userData = localUsersDB[userId];
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ:', userData);
        return {
            user_id: userId,
            balance: userData.balance || 0,
            nick: userData.nick || 'Unknown'
        };
    }
    
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ');
    throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
}

// –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º (–±–µ–∑ API)
function updateLocalBalance(userId, newBalance) {
    if (localUsersDB && localUsersDB[userId]) {
        localUsersDB[userId].balance = newBalance;
        console.log(`–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${userId} = ${newBalance}`);
        return true;
    }
    return false;
}

function addToLocalBalance(userId, amount) {
    if (localUsersDB && localUsersDB[userId]) {
        localUsersDB[userId].balance = (localUsersDB[userId].balance || 0) + amount;
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –∫ –±–∞–ª–∞–Ω—Å—É: ${userId} + ${amount} = ${localUsersDB[userId].balance}`);
        return true;
    }
    return false;
}

function subtractFromLocalBalance(userId, amount) {
    if (localUsersDB && localUsersDB[userId]) {
        localUsersDB[userId].balance = Math.max(0, (localUsersDB[userId].balance || 0) - amount);
        console.log(`–í—ã—á—Ç–µ–Ω–æ –∏–∑ –±–∞–ª–∞–Ω—Å–∞: ${userId} - ${amount} = ${localUsersDB[userId].balance}`);
        return true;
    }
    return false;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram Web App
async function autoLoginFromTelegram() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            console.log('Telegram Web App detected');
            console.log('Init data:', tg.initData);
            console.log('Init data unsafe:', tg.initDataUnsafe);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Web App
            tg.ready();
            tg.expand();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            const user = tg.initDataUnsafe?.user;
            if (user && user.id) {
                console.log('User data found:', user);
                console.log('User ID:', user.id);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                userState.isLoggedIn = true;
                userState.userId = user.id.toString();
                userState.userNick = user.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                userSection.style.display = 'flex';
                userNickEl.textContent = userState.userNick;
                
                console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω');
                return true;
            } else {
                console.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Telegram Web App');
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ initData
                if (tg.initData) {
                    try {
                        const urlParams = new URLSearchParams(tg.initData);
                        const userParam = urlParams.get('user');
                        if (userParam) {
                            const userData = JSON.parse(decodeURIComponent(userParam));
                            if (userData.id) {
                                console.log('User ID from initData:', userData.id);
                                
                                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                userState.isLoggedIn = true;
                                userState.userId = userData.id.toString();
                                userState.userNick = userData.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
                                
                                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                                userSection.style.display = 'flex';
                                userNickEl.textContent = userState.userNick;
                                
                                console.log('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ initData —É—Å–ø–µ—à–µ–Ω');
                                return true;
                            }
                        }
                    } catch (e) {
                        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', e);
                    }
                }
            }
        } else {
            console.log('Telegram Web App –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
        }
        return false;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram:', error);
        return false;
    }
}


// --- –õ–û–ö–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê –° –ë–ê–õ–ê–ù–°–û–ú ---
// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å API –æ—Ç–∫–ª—é—á–µ–Ω–∞ - —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ

// --- –ê–ù–ò–ú–ê–¶–ò–Ø –í–†–ê–©–ï–ù–ò–Ø –ë–ê–†–ê–ë–ê–ù–û–í ---
function startReelSpin() {
    const cells = document.querySelectorAll('.reel-cell');
    cells.forEach((cell, index) => {
        const col = parseInt(cell.dataset.col);
        const speedClass = getSpeedClass(col);
        cell.classList.add('spinning', speedClass);
    });
    
    // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞—á–∞–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è
    playSpinSound();
}

// --- –ó–í–£–ö–û–í–´–ï –≠–§–§–ï–ö–¢–´ ---
function playSpinSound() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç —Å –ø–æ–º–æ—â—å—é Web Audio API
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.1);
    } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞
    }
}

function playWinSound() {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(400, audioContext.currentTime);
        oscillator.frequency.exponentialRampToValueAtTime(800, audioContext.currentTime + 0.2);
        
        gainNode.gain.setValueAtTime(0.15, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.2);
    } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞
    }
}

function createWinParticles() {
    const container = document.querySelector('.slot-machine');
    const rect = container.getBoundingClientRect();
    
    for (let i = 0; i < 20; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ —Å–ª–æ—Ç–æ–≤
        const x = Math.random() * rect.width;
        const y = Math.random() * rect.height;
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞
        const tx = (Math.random() - 0.5) * 200;
        const ty = (Math.random() - 0.5) * 200;
        
        particle.style.left = x + 'px';
        particle.style.top = y + 'px';
        particle.style.setProperty('--tx', tx + 'px');
        particle.style.setProperty('--ty', ty + 'px');
        
        container.appendChild(particle);
        
        // –£–¥–∞–ª—è–µ–º —á–∞—Å—Ç–∏—Ü—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (particle.parentNode) {
                particle.parentNode.removeChild(particle);
            }
        }, 1000);
    }
}

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ü–û–í–¢–û–†–û–ú ---
function startAutospin() {
    if (state.autospinActive) return; // –£–∂–µ –∑–∞–ø—É—â–µ–Ω
    
    state.autospin = true;
    state.autospinCount = AUTOSPIN_LIMIT;
    state.autospinActive = true;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
    autospinBtn.textContent = `AUTOSPIN (${state.autospinCount})`;
    autospinBtn.classList.add('autospin-active');
    
    showNotification(`–ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω: ${state.autospinCount} —Å–ø–∏–Ω–æ–≤`);
    spin();
}

function stopAutospin() {
    state.autospin = false;
    state.autospinCount = 0;
    state.autospinActive = false;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –∫–Ω–æ–ø–∫–∏
    autospinBtn.textContent = 'AUTOSPIN';
    autospinBtn.classList.remove('autospin-active');
    
    showNotification('–ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

function updateAutospinDisplay() {
    if (state.autospinActive && state.autospinCount > 0) {
        autospinBtn.textContent = `AUTOSPIN (${state.autospinCount})`;
    } else {
        autospinBtn.textContent = 'AUTOSPIN';
    }
}

function getSpeedClass(col) {
    // –†–∞–∑–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–∞—Ä–∞–±–∞–Ω–æ–≤
    const speeds = ['spinning-fast', 'spinning-medium', 'spinning-slow', 'spinning-medium', 'spinning-fast'];
    return speeds[col] || 'spinning-medium';
}

function stopReelSpin() {
    const cells = document.querySelectorAll('.reel-cell');
    cells.forEach((cell, index) => {
        const col = parseInt(cell.dataset.col);
        const stopDelay = getStopDelay(col);
        
        setTimeout(() => {
            cell.classList.remove('spinning', 'spinning-fast', 'spinning-medium', 'spinning-slow');
            cell.classList.add('stopping');
            
            setTimeout(() => {
                cell.classList.remove('stopping');
            }, 500);
        }, stopDelay);
    });
}

function getStopDelay(col) {
    // –ë–∞—Ä–∞–±–∞–Ω—ã –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
    const delays = [800, 1200, 1600, 2000, 2400];
    return delays[col] || 1600;
}

function updateReelSymbols(newReels) {
    const cells = document.querySelectorAll('.reel-cell');
    cells.forEach((cell) => {
        const col = parseInt(cell.dataset.col);
        const row = parseInt(cell.dataset.row);
        const symbol = newReels[col][row];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            cell.className = 'reel-cell';
            
            if (symbol.type === 'wild') cell.classList.add('wild');
            if (symbol.type === 'bonus') cell.classList.add('bonus');
            if (symbol.win) cell.classList.add('win');
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è sticky wilds –≤ –±–æ–Ω—É—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if (state.inBonus && state.stickyWilds.some(w => w.col === col && w.row === row)) {
                cell.classList.add('sticky-wild');
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è WILD —Å–∏–º–≤–æ–ª–æ–≤
            let multiplierHtml = '';
            if (symbol.type === 'wild' && symbol.multiplier && symbol.multiplier > 1) {
                multiplierHtml = `<div class="wild-multiplier">x${symbol.multiplier}</div>`;
            }
            
            cell.innerHTML = symbol.emoji + multiplierHtml;
        }, getStopDelay(col) + 500);
    });
}
function showNotification(msg, timeout = 2500) {
    notificationEl.textContent = msg;
    notificationEl.classList.add('show');
    setTimeout(() => notificationEl.classList.remove('show'), timeout);
}
function showModal(html) {
    modalContent.innerHTML = html;
    modal.classList.add('open');
}
function closeModal() {
    modal.classList.remove('open');
}
function openSidebar(html) {
    sidebarContent.innerHTML = html;
    sidebar.classList.add('open');
}
function closeSidebar() {
    sidebar.classList.remove('open');
    // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ sidebar –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
    setTimeout(() => {
        if (!sidebar.classList.contains('open')) {
            sidebarContent.innerHTML = '';
        }
    }, 300);
}

// --- –û–¢–†–ò–°–û–í–ö–ê ---
function renderBalance() {
    balanceEl.textContent = '$' + formatNumber(state.balance);
}
function renderBet() {
    betAmountEl.textContent = '$' + formatNumber(state.bet);
}
function renderReels() {
    reelsEl.innerHTML = '';
    for (let row = 0; row < ROWS; row++) {
        for (let col = 0; col < REELS; col++) {
            const symbol = state.reels[col][row];
            let cellClass = 'reel-cell';
            if (symbol.type === 'wild') cellClass += ' wild';
            if (symbol.type === 'bonus') cellClass += ' bonus';
            if (symbol.win) cellClass += ' win';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è sticky wilds –≤ –±–æ–Ω—É—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
            if (state.inBonus && state.stickyWilds.some(w => w.col === col && w.row === row)) {
                cellClass += ' sticky-wild';
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è WILD —Å–∏–º–≤–æ–ª–æ–≤
            let multiplierHtml = '';
            if (symbol.type === 'wild' && symbol.multiplier && symbol.multiplier > 1) {
                multiplierHtml = `<div class="wild-multiplier">x${symbol.multiplier}</div>`;
            }
            
            reelsEl.innerHTML += `<div class="${cellClass}" data-col="${col}" data-row="${row}">${symbol.emoji}${multiplierHtml}</div>`;
        }
    }
}
function renderWinMessage(win, lines) {
    if (win > 0) {
        winMessageEl.textContent = `–í—ã–∏–≥—Ä—ã—à: +$${formatNumber(win)}`;
        winMessageEl.style.color = 'var(--win)';
    } else {
        winMessageEl.textContent = '';
    }
}

// --- –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–õ–û–¢–û–í ---
function getRandomSymbol(col, row, inBonus = false) {
    // WILD —Ç–æ–ª—å–∫–æ –Ω–∞ 2,3,4 –±–∞—Ä–∞–±–∞–Ω–∞—Ö
    if (inBonus && state.stickyWilds.some(w => w.col === col && w.row === row)) {
        return { emoji: 'ü•à', type: 'wild', multiplier: 1 };
    }
    if (col >= 1 && col <= 3 && Math.random() < 0.03) {
        // 3% —à–∞–Ω—Å WILD (—É–º–µ–Ω—å—à–µ–Ω–æ —Å 12%)
        const multiplier = Math.random() < 0.5 ? 2 : 3;
        const wildEmoji = multiplier === 2 ? 'ü•à' : 'ü•â'; // –°–µ—Ä–µ–±—Ä—è–Ω–∞—è –¥–ª—è x2, –±—Ä–æ–Ω–∑–æ–≤–∞—è –¥–ª—è x3
        return { emoji: wildEmoji, type: 'wild', multiplier };
    }
    // BONUS —Ç–æ–ª—å–∫–æ –Ω–∞ 1,3,5 –±–∞—Ä–∞–±–∞–Ω–∞—Ö
    if (!inBonus && (col === 0 || col === 2 || col === 4) && Math.random() < 0.08) {
        return { emoji: BONUS_EMOJI, type: 'bonus' };
    }
    // –û–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    const idx = Math.floor(Math.random() * EMOJIS.length);
    return { emoji: EMOJIS[idx], type: 'normal', index: idx };
}
function spinReels(inBonus = false) {
    let reels = [];
    for (let col = 0; col < REELS; col++) {
        let reel = [];
        for (let row = 0; row < ROWS; row++) {
            reel.push(getRandomSymbol(col, row, inBonus));
        }
        reels.push(reel);
    }
    return reels;
}

// --- –í–´–ü–õ–ê–¢–´ –ò –í–´–ò–ì–†–´–®–ù–´–ï –õ–ò–ù–ò–ò ---
function checkPaylines(reels, bet) {
    let totalWin = 0;
    let winLines = [];
    let winCells = Array.from({length: REELS}, () => Array(ROWS).fill(false));
    for (let i = 0; i < PAYLINES.length; i++) {
        const line = PAYLINES[i];
        let symbols = [];
        let wilds = [];
        for (let col = 0; col < REELS; col++) {
            const row = line[col];
            const symbol = reels[col][row];
            symbols.push(symbol);
            if (symbol.type === 'wild') wilds.push(col);
        }
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏–º–≤–æ–ª (–Ω–µ wild/bonus)
        let mainSymbol = symbols.find(s => s.type === 'normal');
        if (!mainSymbol) continue;
        let count = 0;
        let wildMultiplier = 1;
        for (let col = 0; col < REELS; col++) {
            const symbol = symbols[col];
            if (symbol.type === 'normal' && symbol.emoji === mainSymbol.emoji) {
                count++;
            } else if (symbol.type === 'wild') {
                count++;
                wildMultiplier *= symbol.multiplier || 1;
            } else {
                break;
            }
        }
        if (count >= 3) {
            // –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Å–∏–º–≤–æ–ª–∞ –≤ EMOJIS
            let idx = EMOJIS.indexOf(mainSymbol.emoji);
            if (idx === -1) continue;
            let pay = PAYTABLE[idx][count-3] * bet * wildMultiplier;
            totalWin += pay;
            winLines.push({ line: i+1, symbol: mainSymbol.emoji, count, pay });
            // –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏
            for (let col = 0; col < count; col++) {
                winCells[col][line[col]] = true;
            }
        }
    }
    // –ü–æ–º–µ—Ç–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ —è—á–µ–π–∫–∏
    for (let col = 0; col < REELS; col++) {
        for (let row = 0; row < ROWS; row++) {
            if (winCells[col][row]) reels[col][row].win = true;
        }
    }
    return { totalWin, winLines };
}

// --- –ë–û–ù–£–°–´ –ò –§–†–ò–°–ü–ò–ù–´ ---
function checkBonus(reels) {
    // 3 BONUS –Ω–∞ 1,3,5 –±–∞—Ä–∞–±–∞–Ω–∞—Ö
    let bonusCols = [0,2,4];
    let bonusCount = 0;
    for (let col of bonusCols) {
        for (let row = 0; row < ROWS; row++) {
            if (reels[col][row].type === 'bonus') bonusCount++;
        }
    }
    return bonusCount >= 3;
}
function startBonus() {
    state.inBonus = true;
    state.bonusActive = true;
    state.freeSpins = Math.floor(Math.random() * (FREE_SPINS_MAX - FREE_SPINS_MIN + 1)) + FREE_SPINS_MIN;
    state.stickyWilds = [];
    showModal(`<h2>–ë–û–ù–£–°–ö–ê!</h2><p>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${state.freeSpins}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤!</p>`);
    setTimeout(closeModal, 2000);
    setTimeout(spinBonus, 2200);
}
function spinBonus() {
    if (state.freeSpins <= 0) {
        state.inBonus = false;
        state.bonusActive = false;
        state.stickyWilds = [];
        showModal(`<h2>–ë–û–ù–£–°–ö–ê –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2><p>–í–∞—à –≤—ã–∏–≥—Ä—ã—à: <b>${formatNumber(state.win)}</b></p>`);
        setTimeout(closeModal, 2500);
        return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã —Å —É—á–µ—Ç–æ–º sticky wilds
    let reels = [];
    for (let col = 0; col < REELS; col++) {
        let reel = [];
        for (let row = 0; row < ROWS; row++) {
            // –ï—Å–ª–∏ sticky wild ‚Äî –≤—Å–µ–≥–¥–∞ wild
            if (state.stickyWilds.some(w => w.col === col && w.row === row)) {
                reel.push({ emoji: 'ü•à', type: 'wild', multiplier: 2 });
            } else if (col >= 1 && col <= 3 && state.stickyWilds.length < 6) {
                // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ sticky wild –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                const baseChance = 0.08; // 8% –±–∞–∑–æ–≤—ã–π —à–∞–Ω—Å
                const existingWilds = state.stickyWilds.length;
                const adjustedChance = baseChance * Math.pow(0.7, existingWilds); // –£–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å –∫–∞–∂–¥—ã–º wild
                
                if (Math.random() < adjustedChance) {
                    state.stickyWilds.push({ col, row });
                    reel.push({ emoji: 'ü•à', type: 'wild', multiplier: 2 });
                }
            } else {
                // –û–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
                const idx = Math.floor(Math.random() * EMOJIS.length);
                reel.push({ emoji: EMOJIS[idx], type: 'normal', index: idx });
            }
        }
        reels.push(reel);
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
    startReelSpin();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ SPIN
    spinBtn.classList.add('spinning');
    setTimeout(() => spinBtn.classList.remove('spinning'), 3000);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setTimeout(() => {
        stopReelSpin();
        updateReelSymbols(reels);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.reels = reels;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
        let { totalWin, winLines } = checkPaylines(reels, state.bet);
        state.balance += totalWin;
        state.win += totalWin;
        state.lastWinLines = winLines;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (userState.isLoggedIn) {
            updateLocalBalance(userState.userId, state.balance);
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            renderReels(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤
            renderWinMessage(totalWin, winLines);
            
            // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
            if (totalWin > 0) {
                playWinSound();
                createWinParticles();
            }
        }, 2800);
        
        state.freeSpins--;
        setTimeout(spinBonus, 3500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–Ω—É—Å–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
    }, 100);
}

// --- –û–°–ù–û–í–ù–û–ô –°–ü–ò–ù ---
function spin() {
    if (state.inBonus || state.bonusActive) return;
    if (state.balance < state.bet) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
        if (state.autospinActive) {
            stopAutospin();
        }
        return;
    }
    
    state.balance -= state.bet;
    renderBalance();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (userState.isLoggedIn) {
        updateLocalBalance(userState.userId, state.balance);
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    const newReels = spinReels();
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è
    startReelSpin();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ SPIN
    spinBtn.classList.add('spinning');
    setTimeout(() => spinBtn.classList.remove('spinning'), 3000);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setTimeout(() => {
        stopReelSpin();
        updateReelSymbols(newReels);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state.reels = newReels;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å
        if (checkBonus(state.reels)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –±–æ–Ω—É—Å–µ
            if (state.autospinActive) {
                stopAutospin();
            }
            
            // x5 –æ—Ç —Å—Ç–∞–≤–∫–∏ + –±–æ–Ω—É—Å
            let win = state.bet * BONUS_WIN_MULTIPLIER;
            state.balance += win;
            state.win = win;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à –±–æ–Ω—É—Å–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(() => {
                renderWinMessage(win, []);
                if (win > 0) {
                    playWinSound();
                    createWinParticles();
                }
            }, 2800);
            
            setTimeout(startBonus, 1800);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏
        let { totalWin, winLines } = checkPaylines(state.reels, state.bet);
        state.balance += totalWin;
        state.win = totalWin;
        state.lastWinLines = winLines;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (userState.isLoggedIn) {
            updateLocalBalance(userState.userId, state.balance);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        state.history.unshift({
            time: new Date().toLocaleTimeString(),
            bet: state.bet,
            win: totalWin,
            lines: winLines
        });
        if (state.history.length > 50) state.history.pop();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            renderReels(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–∞—Ä–∞–±–∞–Ω–æ–≤
            renderWinMessage(totalWin, winLines);
            
            // –ó–≤—É–∫–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ
            if (totalWin > 0) {
                playWinSound();
                createWinParticles();
            }
        }, 2800);
        
        if (state.autospin && state.autospinCount > 0) {
            state.autospinCount--;
            updateAutospinDisplay();
            
            if (state.autospinCount > 0) {
                setTimeout(spin, 3500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä–∞
            } else {
                stopAutospin(); // –ê–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
            }
        } else {
            state.autospin = false;
        }
    }, 100);
}

// --- –ö–ù–û–ü–ö–ò –ò –°–û–ë–´–¢–ò–Ø ---
spinBtn.onclick = () => spin();

autospinBtn.onclick = () => {
    if (state.inBonus || state.bonusActive) return;
    
    if (state.autospinActive) {
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        stopAutospin();
    } else {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä
        startAutospin();
    }
};
maxbetBtn.onclick = () => {
    state.bet = Math.min(state.balance, MAX_BET);
    renderBet();
};
buybonusBtn.onclick = () => {
    if (state.inBonus || state.bonusActive) return;
    let price = state.bet * BONUS_BUY_MULTIPLIER;
    if (state.balance < price) {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –±–æ–Ω—É—Å–∞!');
        return;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–ø–æ–≤—Ç–æ—Ä –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–æ–Ω—É—Å–∞
    if (state.autospinActive) {
        stopAutospin();
    }
    
    state.balance -= price;
    state.win = 0;
    renderAll();
    setTimeout(startBonus, 800);
};
betMinusBtn.onclick = () => {
    state.bet = Math.max(MIN_BET, state.bet - BET_STEP);
    renderBet();
};
betPlusBtn.onclick = () => {
    state.bet = Math.min(MAX_BET, state.bet + BET_STEP, state.balance);
    renderBet();
};
rulesBtn.onclick = () => {
    openSidebar(renderRules());
};
historyBtn.onclick = () => {
    openSidebar(renderHistory());
};
showPaylinesBtn.onclick = () => {
    openSidebar(renderPaylines());
};
closeSidebarBtn.onclick = closeSidebar;
closeModalBtn.onclick = closeModal;

// –ó–∞–∫—Ä—ã—Ç–∏–µ sidebar –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
document.addEventListener('click', (e) => {
    if (sidebar.classList.contains('open') && 
        !sidebar.contains(e.target) && 
        !showPaylinesBtn.contains(e.target) && 
        !rulesBtn.contains(e.target) && 
        !historyBtn.contains(e.target)) {
        closeSidebar();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ sidebar –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        if (state.autospinActive) {
            stopAutospin();
        }
        if (sidebar.classList.contains('open')) {
            closeSidebar();
        }
        if (modal.classList.contains('open')) {
            closeModal();
        }
    }
});

// --- –†–ï–ù–î–ï–† –ü–†–ê–í–ò–õ, –õ–ò–ù–ò–ô, –ò–°–¢–û–†–ò–ò ---
function renderRules() {
    return `
    <div class="rules-container">
        <div class="rules-header">
            <h2>üìã –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã</h2>
            <p class="rules-subtitle">–ò–∑—É—á–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ—Ç–∞ Dog House</p>
        </div>

        <div class="rules-section">
            <div class="rule-card">
                <div class="rule-icon">üé∞</div>
                <div class="rule-content">
                    <h3>–°–∏–º–≤–æ–ª—ã –∏–≥—Ä—ã</h3>
                    <div class="symbols-grid">
                        ${EMOJIS.map(emoji => `<span class="symbol-item">${emoji}</span>`).join('')}
                        <span class="symbol-item wild-symbol">ü•à</span>
                        <span class="symbol-item wild-symbol">ü•â</span>
                        <span class="symbol-item bonus-symbol">${BONUS_EMOJI}</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="rules-section">
            <div class="rule-card">
                <div class="rule-icon">ü•à</div>
                <div class="rule-content">
                    <h3>WILD —Å–∏–º–≤–æ–ª—ã</h3>
                    <ul class="rule-list">
                        <li>–≠—Ç–∏ —Å–∏–º–≤–æ–ª—ã ‚Äî WILD, –∏ –æ–Ω–∏ –º–æ–≥—É—Ç –∑–∞–º–µ–Ω—è—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∏–Ω–∏–∏, –∫—Ä–æ–º–µ ${BONUS_EMOJI}</li>
                        <li>–°–∏–º–≤–æ–ª—ã WILD –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 2, 3, 4</li>
                        <li>–ú–æ–≥—É—Ç –∏–º–µ—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏ —Ö2 –∏–ª–∏ —Ö3</li>
                        <li>–ú–Ω–æ–∂–∏—Ç–µ–ª—å WILD –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫ –≤—ã–∏–≥—Ä—ã—à—É –Ω–∞ –ª–∏–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª WILD –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è</li>
                        <li>–ï—Å–ª–∏ –Ω–∞ –ª–∏–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ WILD, –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ WILD –Ω–∞ –¥–∞–Ω–Ω–æ–π –ª–∏–Ω–∏–∏ —Å—É–º–º–∏—Ä—É—é—Ç—Å—è</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="rules-section">
            <div class="rule-card">
                <div class="rule-icon">${BONUS_EMOJI}</div>
                <div class="rule-content">
                    <h3>BONUS —Å–∏–º–≤–æ–ª—ã</h3>
                    <ul class="rule-list">
                        <li>–≠—Ç–æ—Ç —Å–∏–º–≤–æ–ª ‚Äî BONUS. –û–Ω –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 1, 3 –∏ 5</li>
                        <li>–í—ã–±–µ–π—Ç–µ 3 —Å–∏–º–≤–æ–ª–∞ BONUS, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å —Ö5 –æ—Ç —Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–û–ù–£–°–ö–£</li>
                        <li>–í–æ –≤—Ä–µ–º—è –±–æ–Ω—É—Å–∫–∏ WILD –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ –¥–æ –∫–æ–Ω—Ü–∞ –±–æ–Ω—É—Å–∫–∏</li>
                        <li>–í–æ –≤—Ä–µ–º—è –±–æ–Ω—É—Å–∫–∏ —Å–∏–º–≤–æ–ª—ã BONUS –Ω–µ –≤—ã–ø–∞–¥–∞—é—Ç</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="rules-section">
            <div class="rule-card">
                <div class="rule-icon">üí∞</div>
                <div class="rule-content">
                    <h3>–í—ã–ø–ª–∞—Ç—ã</h3>
                    <ul class="rule-list">
                        <li>–í—ã–ø–ª–∞—Ç—ã –ø–æ –ª–∏–Ω–∏—è–º ‚Äî —Ç–æ–ª—å–∫–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ, –Ω–∞—á–∏–Ω–∞—è —Å –∫—Ä–∞–π–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞</li>
                        <li>–ú–∞–∫—Å–∏–º—É–º 20 –ª–∏–Ω–∏–π –≤—ã–ø–ª–∞—Ç</li>
                        <li>–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–∞</li>
                    </ul>
                </div>
            </div>
        </div>

        <div class="rules-section">
            <div class="rule-card paytable-card">
                <div class="rule-icon">üìä</div>
                <div class="rule-content">
                    <h3>–¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç</h3>
                    <div class="paytable-container">
                        <table class="paytable">
                            <thead>
                                <tr>
                                    <th>–°–∏–º–≤–æ–ª</th>
                                    <th>5 —Å–∏–º–≤–æ–ª–æ–≤</th>
                                    <th>4 —Å–∏–º–≤–æ–ª–∞</th>
                                    <th>3 —Å–∏–º–≤–æ–ª–∞</th>
                                </tr>
                            </thead>
                            <tbody>
                                ${EMOJIS.map((emoji, i) => `
                                    <tr class="paytable-row">
                                        <td class="symbol-cell">${emoji}</td>
                                        <td class="win-cell">x${PAYTABLE[i][0]}</td>
                                        <td class="win-cell">x${PAYTABLE[i][1]}</td>
                                        <td class="win-cell">x${PAYTABLE[i][2]}</td>
                                    </tr>
                                `).join('')}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    `;
}
function renderPaylines() {
    return `
    <div class="paylines-container">
        <div class="paylines-header">
            <h2>üéØ –õ–∏–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç</h2>
            <p class="paylines-subtitle">–í –∏–≥—Ä–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç 20 –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –ª–∏–Ω–∏–π</p>
        </div>

        <div class="paylines-grid">
            ${PAYLINES.map((line, i) => `
                <div class="payline-item">
                    <div class="payline-number">–õ–∏–Ω–∏—è ${i + 1}</div>
                    <div class="payline-visual">
                        ${Array(3).fill(0).map((_, row) => 
                            Array(5).fill(0).map((_, col) => {
                                const isActive = line[col] === row;
                                return `<div class="payline-cell ${isActive ? 'active' : ''}"></div>`;
                            }).join('')
                        ).join('')}
                    </div>
                    <div class="payline-info">
                        <p>–í—ã–∏–≥—Ä—ã—à–Ω–∞—è –ª–∏–Ω–∏—è ${i + 1}</p>
                    </div>
                </div>
            `).join('')}
        </div>

        <div class="paylines-info">
            <div class="info-card">
                <div class="info-icon">‚ÑπÔ∏è</div>
                <div class="info-content">
                    <h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏–Ω–∏–∏</h3>
                    <p>–í—Å–µ –≤—ã–ø–ª–∞—Ç—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –≤—ã–ø–∞–¥–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –ø–æ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–º –ª–∏–Ω–∏—è–º, –Ω–∞—á–∏–Ω–∞—è —Å –∫—Ä–∞–π–Ω–µ–≥–æ –ª–µ–≤–æ–≥–æ –±–∞—Ä–∞–±–∞–Ω–∞.</p>
                </div>
            </div>
        </div>
    </div>
    `;
}
function renderHistory() {
    return `
    <div class="history-container">
        <div class="history-header">
            <h2>üìà –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä</h2>
            <p class="history-subtitle">–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</p>
        </div>

        ${state.history.length === 0 ? `
            <div class="empty-history">
                <div class="empty-icon">üé∞</div>
                <h3>–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p>–°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–≥—Ä</p>
            </div>
        ` : `
            <div class="history-stats">
                <div class="stat-card">
                    <div class="stat-icon">üéØ</div>
                    <div class="stat-content">
                        <div class="stat-value">${state.history.length}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ –∏–≥—Ä</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">üí∞</div>
                    <div class="stat-content">
                        <div class="stat-value">${formatNumber(state.history.reduce((sum, h) => sum + h.win, 0))}</div>
                        <div class="stat-label">–û–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à</div>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">üèÜ</div>
                    <div class="stat-content">
                        <div class="stat-value">${state.history.filter(h => h.win > 0).length}</div>
                        <div class="stat-label">–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö –∏–≥—Ä</div>
                    </div>
                </div>
            </div>

            <div class="history-list">
                ${state.history.map((h, index) => `
                    <div class="history-item ${h.win > 0 ? 'win' : 'loss'}">
                        <div class="history-time">
                            <div class="time-icon">üïê</div>
                            <div class="time-text">${h.time}</div>
                        </div>
                        <div class="history-details">
                            <div class="bet-info">
                                <span class="bet-label">–°—Ç–∞–≤–∫–∞:</span>
                                <span class="bet-amount">${formatNumber(h.bet)}</span>
                            </div>
                            <div class="win-info">
                                <span class="win-label">–í—ã–∏–≥—Ä—ã—à:</span>
                                <span class="win-amount ${h.win > 0 ? 'positive' : 'negative'}">${formatNumber(h.win)}</span>
                            </div>
                            ${h.lines.length > 0 ? `
                                <div class="lines-info">
                                    <span class="lines-label">–õ–∏–Ω–∏–∏:</span>
                                    <span class="lines-numbers">${h.lines.map(l => l.line).join(', ')}</span>
                                </div>
                            ` : ''}
                        </div>
                        <div class="history-status">
                            ${h.win > 0 ? 'üéâ' : 'üòî'}
                        </div>
                    </div>
                `).join('')}
            </div>
        `}
    </div>
    `;
}

// --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
function renderAll() {
    renderBalance();
    renderBet();
    renderReels();
}


async function init() {
    state.reels = spinReels();
    renderAll();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await loadLocalUsersDB();
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram Web App
    const telegramLoginSuccess = await autoLoginFromTelegram();
    
    // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (!telegramLoginSuccess) {
        userState.isLoggedIn = true;
        userState.userId = 'guest';
        userState.userNick = '–ì–æ—Å—Ç—å';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        userSection.style.display = 'flex';
        userNickEl.textContent = userState.userNick;
    }
}

init();
}); 
