// –ö–æ–Ω—Ñ–∏–≥–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –≤—ã–ø–ª–∞—Ç (–º–Ω–æ–∂–∏—Ç–µ–ª–∏, WILD, BONUS)
const SYMBOLS = ['üê∂','ü§°','üòà','üëπ','üëΩ','ü§ñ','üíÄ','üëª','ü§¨','üòé','üçî'];
const WILD_SYMBOLS = ['ü•à','ü•â']; // —É–ø—Ä–æ—Å—Ç–∏–º ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –±–∞—Ä–∞–±–∞–Ω—ã 2,3,4 —Å –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä–∞–º–∏
const BONUS_SYMBOL = 'üí∞';

// –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –ª–∏–Ω–∏–∏ ‚Äî –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ –∫–æ–ª–æ–Ω–∫–∞–º (20 –ª–∏–Ω–∏–π)
// –î–ª—è 5 –∫–æ–ª–æ–Ω–æ–∫ –∏ 3 —Å—Ç—Ä–æ–∫, –∫–∞–∂–¥–∞—è –ª–∏–Ω–∏—è ‚Äî –º–∞—Å—Å–∏–≤ –∏–∑ 5 –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (0..2)
// –ü—Ä–∏–º–µ—Ä: –ª–∏–Ω–∏—è 0 ‚Äî –≤–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ (0,0),(0,1),(0,2),(0,3),(0,4) ‚Äî —Ç.–µ. –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ 0
const WIN_LINES = [
  [0,0,0,0,0], // –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è
  [1,1,1,1,1], // –°—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è
  [2,2,2,2,2], // –ù–∏–∂–Ω—è—è –ª–∏–Ω–∏—è
  [0,1,2,1,0], // –ó–∏–≥–∑–∞–≥ –∏ —Ç.–¥.
  [2,1,0,1,2],
  // ... –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ 15 –ª–∏–Ω–∏–π, –∏—Ç–æ–≥–æ 20
];

// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è ‚Äî –¥–æ–±–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ 20 –ª–∏–Ω–∏–π –Ω–∏–∂–µ (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
const FULL_WIN_LINES = [
  [0,0,0,0,0],
  [1,1,1,1,1],
  [2,2,2,2,2],
  [0,1,0,1,0],
  [2,1,2,1,2],
  [0,0,1,0,0],
  [2,2,1,2,2],
  [1,0,1,2,1],
  [1,2,1,0,1],
  [0,1,1,1,0],
  [2,1,1,1,2],
  [1,1,0,1,1],
  [1,1,2,1,1],
  [0,2,0,2,0],
  [2,0,2,0,2],
  [1,0,0,0,1],
  [1,2,2,2,1],
  [0,1,2,2,2],
  [2,1,0,0,0],
  [1,1,1,0,2]
];

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –≤—ã–ø–ª–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
const PAYOUTS = {
  'üê∂': {3: 2.5, 4: 7.5, 5: 37.55},
  'ü§°': {3: 1.75, 4: 5.0, 5: 25.05},
  'üòà': {3: 1.25, 4: 3.0, 5: 15.0},
  'üëπ': {3: 1.0, 4: 2.0, 5: 10.0},
  'üëΩ': {3: 0.6, 4: 1.25, 5: 7.5},
  'ü§ñ': {3: 0.4, 4: 1.0, 5: 5.0},
  'üíÄ': {3: 0.25, 4: 0.5, 5: 2.5},
  'üëª': {3: 0.25, 4: 0.5, 5: 2.5},
  'ü§¨': {3: 0.1, 4: 0.25, 5: 1.25},
  'üòé': {3: 0.1, 4: 0.25, 5: 1.25},
  'üçî': {3: 0.1, 4: 0.25, 5: 1.25},
  'BONUS': {3: 5} // –ø—Ä–∏ 3 –±–æ–Ω—É—Å–∞—Ö —Å—Ç–∞–≤–∫–∞ —Ö5
};

let balance = 1_000_000_000;
let bet = 1000;
let freeSpins = 0;
let spinning = false;

// –≠–ª–µ–º–µ–Ω—Ç—ã UI
const balanceElem = document.getElementById('balance-value');
const betInput = document.getElementById('bet-input');
const spinButton = document.getElementById('spin-button');
const reelsContainer = document.getElementById('reels-container');
const freeSpinsElem = document.getElementById('free-spins');
const freeSpinsContainer = document.getElementById('free-spins-container');
const winMessage = document.getElementById('win-message');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞—Ä–∞–±–∞–Ω–æ–≤: 5 –∫–æ–ª–æ–Ω–æ–∫ * 3 —Å—Ç—Ä–æ–∫–∏
let reels = new Array(5).fill(0).map(() => new Array(3).fill(''));

// –§–æ—Ä–º–∞—Ç –±–∞–ª–∞–Ω—Å–∞ —Å —Ç–æ—á–∫–∞–º–∏
function formatNumberWithDots(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
function updateUI() {
  balanceElem.textContent = formatNumberWithDots(balance) + '$';
  betInput.value = bet;
  if (freeSpins > 0) {
    freeSpinsContainer.style.display = 'block';
    freeSpinsElem.textContent = freeSpins;
  } else {
    freeSpinsContainer.style.display = 'none';
  }
  renderReels();
  winMessage.textContent = '';
}

// –†–µ–Ω–¥–µ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
function renderReels() {
  reelsContainer.innerHTML = '';
  for(let row = 0; row < 3; row++) {
    for(let col = 0; col < 5; col++) {
      const symbol = reels[col][row] || SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
      const div = document.createElement('div');
      div.className = 'symbol';
      div.textContent = symbol;
      reelsContainer.appendChild(div);
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞ —Å —É—á—ë—Ç–æ–º –ø—Ä–∞–≤–∏–ª
function randomSymbolForReel(reelIndex) {
  // BONUS —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 1,3,5 (–∏–Ω–¥–µ–∫—Å—ã 0,2,4)
  if ([0,2,4].includes(reelIndex)) {
    if (Math.random() < 0.05) return BONUS_SYMBOL; // 5% —à–∞–Ω—Å –±–æ–Ω—É—Å–∞
  }
  // WILD –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 2,3,4 (–∏–Ω–¥–µ–∫—Å—ã 1,2,3)
  if ([1,2,3].includes(reelIndex)) {
    if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å WILD
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π wild —Å–∏–º–≤–æ–ª —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º
      const wild = WILD_SYMBOLS[Math.floor(Math.random() * WILD_SYMBOLS.length)];
      return wild;¬†
    }
  }
  return SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
}

// –ó–∞–ø–æ–ª–Ω—è–µ–º reels –Ω–æ–≤—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
function spinReels() {
  for(let col=0; col < 5; col++) {
    for(let row=0; row < 3; row++) {
      reels[col][row] = randomSymbolForReel(col);
    }
  }
}

// –ü–æ–¥—Å—á—ë—Ç –≤—ã–∏–≥—Ä—ã—à–∞ —Å —É—á—ë—Ç–æ–º –ª–∏–Ω–∏–π, –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π –∏ –±–æ–Ω—É—Å–æ–≤
function calculateWin() {
  let totalWin = 0;
  let bonusCount = 0;
  // –°—á–∏—Ç–∞–µ–º –±–æ–Ω—É—Å—ã
  for(let col=0; col < 5; col++) {
    for(let row=0; row < 3; row++) {
      if(reels[col][row] === BONUS_SYMBOL) bonusCount++;
    }
  }
  if (bonusCount >=3) {
    totalWin += bet * PAYOUTS['BONUS'][3];
    freeSpins += 10 + Math.floor(Math.random()*10); // 10-19 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
  }

  // –ü–æ–¥—Å—á—ë—Ç –ø–æ –ª–∏–Ω–∏—è–º
  FULL_WIN_LINES.forEach(line => {
    // –ù–∞ –ª–∏–Ω–∏–∏ ‚Äî –±–µ—Ä–µ–º —Å–∏–º–≤–æ–ª—ã –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
    let lineSymbols = [];
    for(let col=0; col<5; col++) {
      lineSymbols.push(reels[col][line[col]]);
    }
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    let firstSym = lineSymbols[0];
    if(firstSym === BONUS_SYMBOL) return; // –±–æ–Ω—É—Å –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–ª—è –ª–∏–Ω–∏–∏

    // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–º–µ–Ω—É WILD –Ω–∞ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞
    let wildMultipliers = 0;
    let matchCount = 1;

    for(let i=1; i<5; i++) {
      let sym = lineSymbols[i];
      if(sym === firstSym || WILD_SYMBOLS.includes(sym)) {
        matchCount++;
        if(WILD_SYMBOLS.includes(sym)) wildMultipliers += 2; // —É–ø—Ä–æ—â–µ–Ω–∏–µ: –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö2
      } else break;
    }

    if(matchCount >=3) {
      // –û—Å–Ω–æ–≤–Ω–æ–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
      let payout = PAYOUTS[firstSym]?.[matchCount] || 0;
      if (payout > 0) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ WILD
        payout *= (1 + wildMultipliers);
        totalWin += bet * payout;
      }
    }
  });

  return totalWin;
}

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ‚Äî –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è, –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
async function animateSpin() {
  const spinDuration = 1800; // 1.8 —Å–µ–∫
  const interval = 150; // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 150–º—Å
  let elapsed = 0;

  while(elapsed < spinDuration) {
    spinReels();
    renderReels();
    await new Promise(r => setTimeout(r, interval));
    elapsed += interval;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–∏–Ω–∞
async function onSpinClick() {
  if (spinning) return;
  if (bet > balance && freeSpins <= 0) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏!');
    return;
  }
  spinning = true;
  spinButton.disabled = true;
  winMessage.textContent = '';

  if (freeSpins > 0) {
    freeSpins--;
  } else {
    balance -= bet;
  }
  updateUI();

  await animateSpin();

  const win = calculateWin();
  balance += win;

  if (win > 0) {
    winMessage.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${formatNumberWithDots(win)}$! üéâ`;
  }

  updateUI();

  spinning = false;
  spinButton.disabled = false;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
spinButton.addEventListener('click', onSpinClick);
betInput.addEventListener('change', (e) => {
  let val = Number(e.target.value);
  if (val < 1) val = 1;
  if (val > balance) val = balance;
  bet = val;
  updateUI();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
updateUI();
