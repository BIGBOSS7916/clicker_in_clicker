// –°–∏–º–≤–æ–ª—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const SYMBOLS = ['üê∂','ü§°','üòà','üëπ','üëΩ','ü§ñ','üíÄ','üëª','ü§¨','üòé','üçî'];
const WILD_SYMBOLS = ['ü•à','ü•â'];
const BONUS_SYMBOL = 'üí∞';

// 20 –ª–∏–Ω–∏–π –≤—ã–ø–ª–∞—Ç (–∫–∞–∂–¥–∞—è ‚Äî –º–∞—Å—Å–∏–≤ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ 0..4)
const FULL_WIN_LINES = [
  [0,0,0,0,0],
  [1,1,1,1,1],
  [2,2,2,2,2],
  [0,1,0,1,0],
  [2,1,2,1,2],
  [0,0,1,0,0],
  [2,2,1,2,2],
  [1,0,1,2,1],
  [1,2,1,0,1],
  [0,1,1,1,0],
  [2,1,1,1,2],
  [1,1,0,1,1],
  [1,1,2,1,1],
  [0,2,0,2,0],
  [2,0,2,0,2],
  [1,0,0,0,1],
  [1,2,2,2,1],
  [0,1,2,2,2],
  [2,1,0,0,0],
  [1,1,1,0,2]
];

// –ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤
const PAYOUTS = {
  'üê∂': {3: 2.5, 4: 7.5, 5: 37.55},
  'ü§°': {3: 1.75, 4: 5.0, 5: 25.05},
  'üòà': {3: 1.25, 4: 3.0, 5: 15.0},
  'üëπ': {3: 1.0, 4: 2.0, 5: 10.0},
  'üëΩ': {3: 0.6, 4: 1.25, 5: 7.5},
  'ü§ñ': {3: 0.4, 4: 1.0, 5: 5.0},
  'üíÄ': {3: 0.25, 4: 0.5, 5: 2.5},
  'üëª': {3: 0.25, 4: 0.5, 5: 2.5},
  'ü§¨': {3: 0.1, 4: 0.25, 5: 1.25},
  'üòé': {3: 0.1, 4: 0.25, 5: 1.25},
  'üçî': {3: 0.1, 4: 0.25, 5: 1.25},
  'BONUS': {3: 5} // –±–æ–Ω—É—Å –ø—Ä–∏ 3 –∏ –±–æ–ª–µ–µ
};

let balance = 1_000_000_000;
let bet = 1000;
let freeSpins = 0;
let spinning = false;

// UI —ç–ª–µ–º–µ–Ω—Ç—ã
const balanceElem = document.getElementById('balance-value');
const betInput = document.getElementById('bet-input');
const spinButton = document.getElementById('spin-button');
const reelsContainer = document.getElementById('reels-container');
const freeSpinsElem = document.getElementById('free-spins');
const freeSpinsContainer = document.getElementById('free-spins-container');
const winMessage = document.getElementById('win-message');

let reels = new Array(5).fill(0).map(() => new Array(3).fill(''));

// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–∞–º–∏
function formatNumberWithDots(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".");
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
function updateUI() {
  balanceElem.textContent = formatNumberWithDots(balance) + '$';
  betInput.value = bet;
  if (freeSpins > 0) {
    freeSpinsContainer.style.display = 'block';
    freeSpinsElem.textContent = freeSpins;
  } else {
    freeSpinsContainer.style.display = 'none';
  }
  renderReels();
  winMessage.textContent = '';
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∞—Ä–∞–±–∞–Ω–æ–≤
function renderReels() {
  reelsContainer.innerHTML = '';
  for(let row = 0; row < 3; row++) {
    for(let col = 0; col < 5; col++) {
      const symbol = reels[col][row] || SYMBOLS[Math.floor(Math.random()*SYMBOLS.length)];
      const div = document.createElement('div');
      div.classList.add('symbol');
      div.textContent = symbol;
      reelsContainer.appendChild(div);
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–ø–∏–Ω–∞
function generateSpinResult() {
  const result = [];
  for(let col=0; col<5; col++) {
    const colSymbols = [];
    for(let row=0; row<3; row++) {
      // –°–ª—É—á–∞–π–Ω–æ –≤–∫–∏–Ω—É—Ç—å BONUS –∏ WILD –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
      if (col === 0 || col === 2 || col === 4) {
        // –±–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 1,3,5
        if (Math.random() < 0.07) {
          colSymbols.push(BONUS_SYMBOL);
          continue;
        }
      }
      if (col === 1 || col === 2 || col === 3) {
        // WILD –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö 2,3,4 —Å –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º 50% —à–∞–Ω—Å x2, 50% x3
        if (Math.random() < 0.1) {
          let wildSymbol = WILD_SYMBOLS[Math.floor(Math.random()*WILD_SYMBOLS.length)];
          // –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞ —Ä—è–¥–æ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ (–≤ —Ä–µ–∞–ª–µ –≤–∏–∑—É–∞–ª—å–Ω–æ)
          colSymbols.push(wildSymbol);¬†
          continue;
        }
      }
      colSymbols.push(SYMBOLS[Math.floor(Math.random()*SYMBOLS.length)]);
    }
    result.push(colSymbols);
  }
  return result;
}

// –ê–Ω–∏–º–∞—Ü–∏—è –∫—Ä—É—á–µ–Ω–∏—è (–ø–ª–∞–≤–Ω–∞—è —Å–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)
async function animateSpin() {
  const frames = 15;
  const delay = 50;
  for (let f = 0; f < frames; f++) {
    for(let col = 0; col < 5; col++) {
      for(let row = 0; row < 3; row++) {
        reels[col][row] = SYMBOLS[Math.floor(Math.random()*SYMBOLS.length)];
      }
    }
    renderReels();
    await new Promise(r => setTimeout(r, delay));
  }
  // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å—Ç–∞–≤–∏–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  reels = generateSpinResult();
  renderReels();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–∞ –ª–∏–Ω–∏—è—Ö —Å —É—á–µ—Ç–æ–º WILD –∏ –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
function calculateWin() {
  let totalWin = 0;
  let bonusCount = 0;
  // –ü–æ–¥—Å—á—ë—Ç –±–æ–Ω—É—Å–æ–≤ –Ω–∞ –ø–æ–ª–µ
  for(let col=0; col<5; col++) {
    for(let row=0; row<3; row++) {
      if(reels[col][row] === BONUS_SYMBOL) bonusCount++;
    }
  }

  // –ï—Å–ª–∏ 3 –∏ –±–æ–ª–µ–µ –±–æ–Ω—É—Å–∞ ‚Äî –ø—Ä–∏–±–∞–≤–ª—è–µ–º —Ö5 —Å—Ç–∞–≤–∫–∏ + –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ–Ω—É—Å–Ω—ã–π —Ä–∞—É–Ω–¥
  if (bonusCount >= 3) {
    totalWin += bet * 5;
    freeSpins += Math.floor(Math.random() * 5) + 5; // 5-9 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞ –ø–æ –ª–∏–Ω–∏—è–º
  FULL_WIN_LINES.forEach(line => {
    let lineSymbols = [];
    for(let col=0; col<5; col++) {
      lineSymbols.push(reels[col][line[col]]);
    }

    // –ò—â–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
    let firstSymbol = null;
    let count = 0;
    let wildMultiplier = 0;
    let winSymbol = null;

    for(let i=0; i<lineSymbols.length; i++) {
      let sym = lineSymbols[i];
      if(i === 0) {
        if(sym === BONUS_SYMBOL) break; // –±–æ–Ω—É—Å—ã –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –Ω–∞ –ª–∏–Ω–∏—è—Ö
        firstSymbol = (WILD_SYMBOLS.includes(sym)) ? null : sym;
        winSymbol = (WILD_SYMBOLS.includes(sym)) ? null : sym;
        if(WILD_SYMBOLS.includes(sym)) wildMultiplier += (sym === 'ü•à') ? 2 : 3;
        count++;
        continue;
      }

      if(sym === firstSymbol || (WILD_SYMBOLS.includes(sym) || (firstSymbol === null && !WILD_SYMBOLS.includes(sym)))) {
        if(WILD_SYMBOLS.includes(sym)) {
          wildMultiplier += (sym === 'ü•à') ? 2 : 3;
          if(winSymbol === null) winSymbol = firstSymbol || sym;
        } else {
          if(winSymbol === null) winSymbol = sym;
        }
        count++;
      } else {
        break;
      }
    }

    if(count >= 3 && winSymbol && PAYOUTS[winSymbol]) {
      let basePayout = PAYOUTS[winSymbol][count] || 0;
      if(wildMultiplier === 0) wildMultiplier = 1;
      totalWin += bet * basePayout * wildMultiplier;
    }
  });

  return Math.floor(totalWin);
}

// –ö–Ω–æ–ø–∫–∞ –°–ü–ò–ù
async function onSpinClick() {
  if (spinning) return;
  if (bet > balance && freeSpins <= 0) {
    alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏!');
    return;
  }

  spinning = true;
  spinButton.disabled = true;
  winMessage.textContent = '';

  if (freeSpins > 0) {
    freeSpins--;
  } else {
    balance -= bet;
  }
  updateUI();

  await animateSpin();

  const win = calculateWin();

  if(win > 0) {
    balance += win;
    winMessage.textContent = `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${formatNumberWithDots(win)}$! üéâ`;
  } else {
    winMessage.textContent = '–£–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!';
  }

  updateUI();

  spinning = false;
  spinButton.disabled = false;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ UI
spinButton.addEventListener('click', onSpinClick);
betInput.addEventListener('change', (e) => {
  let val = Number(e.target.value);
  if(val < 1) val = 1;
  if(val > balance) val = balance;
  bet = val;
  updateUI();
});

updateUI();
